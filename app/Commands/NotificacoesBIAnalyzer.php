<?php

namespace App\Commands;

use CodeIgniter\CLI\BaseCommand;
use CodeIgniter\CLI\CLI;
use App\Libraries\NotificacaoAnalyzer;

class NotificacoesBIAnalyzer extends BaseCommand
{
    protected $group       = 'Sistema';
    protected $name        = 'notificacoes:analisar';
    protected $description = 'Executa an√°lise BI para gerar notifica√ß√µes inteligentes';
    protected $usage       = 'notificacoes:analisar [opcoes]';
    protected $arguments   = [];
    protected $options     = [
        '--force' => 'For√ßa a execu√ß√£o mesmo se houver an√°lise recente',
        '--tipo'  => 'Executa apenas um tipo espec√≠fico de an√°lise',
        '--quiet' => 'Executa em modo silencioso'
    ];

    public function run(array $params)
    {
        $force = CLI::getOption('force');
        $tipo = CLI::getOption('tipo');
        $quiet = CLI::getOption('quiet');

        if (!$quiet) {
            CLI::write('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'cyan');
            CLI::write('              AN√ÅLISE BI - NOTIFICA√á√ïES INTELIGENTES       ', 'cyan');
            CLI::write('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'cyan');
            CLI::newLine();
        }

        try {
            // Verifica se deve executar (evita an√°lises muito frequentes)
            if (!$force && $this->verificarAnaliseRecente()) {
                if (!$quiet) {
                    CLI::write('An√°lise j√° executada recentemente. Use --force para for√ßar.', 'yellow');
                }
                return;
            }

            $analyzer = new NotificacaoAnalyzer();
            
            if (!$quiet) {
                CLI::write('üîç Iniciando an√°lise BI...', 'green');
                CLI::newLine();
            }

            // Marca in√≠cio da an√°lise
            $this->marcarInicioAnalise();

            // Executa an√°lise
            $resultado = $analyzer->executarAnaliseCompleta();

            if ($resultado['success']) {
                if (!$quiet) {
                    CLI::write('‚úÖ An√°lise conclu√≠da com sucesso!', 'green');
                    CLI::write("üìä {$resultado['notificacoes_criadas']} notifica√ß√µes criadas", 'cyan');
                    
                    // Exibe resumo detalhado
                    $this->exibirResumoAnalise();
                }
                
                // Registra sucesso
                $this->registrarResultadoAnalise(true, $resultado['notificacoes_criadas']);
                
            } else {
                CLI::write('‚ùå Erro na an√°lise: ' . $resultado['error'], 'red');
                $this->registrarResultadoAnalise(false, 0, $resultado['error']);
                return EXIT_ERROR;
            }

        } catch (\Exception $e) {
            CLI::write('üí• Erro cr√≠tico: ' . $e->getMessage(), 'red');
            $this->registrarResultadoAnalise(false, 0, $e->getMessage());
            return EXIT_ERROR;
        }

        if (!$quiet) {
            CLI::newLine();
            CLI::write('üéØ An√°lise BI finalizada!', 'green');
        }

        return EXIT_SUCCESS;
    }

    /**
     * Verifica se houve an√°lise recente (√∫ltimas 2 horas)
     */
    protected function verificarAnaliseRecente(): bool
    {
        $cache = \Config\Services::cache();
        $ultimaAnalise = $cache->get('notificacoes_ultima_analise');
        
        if ($ultimaAnalise) {
            $diferencaMinutos = (time() - $ultimaAnalise) / 60;
            return $diferencaMinutos < 120; // 2 horas
        }
        
        return false;
    }

    /**
     * Marca o in√≠cio da an√°lise no cache
     */
    protected function marcarInicioAnalise(): void
    {
        $cache = \Config\Services::cache();
        $cache->save('notificacoes_ultima_analise', time(), 3600 * 24); // 24 horas
    }

    /**
     * Exibe resumo detalhado da an√°lise
     */
    protected function exibirResumoAnalise(): void
    {
        $notificacaoModel = new \App\Models\NotificacaoModel();
        
        CLI::newLine();
        CLI::write('üìà RESUMO DA AN√ÅLISE:', 'yellow');
        CLI::write('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ', 'yellow');
        
        // Estat√≠sticas por severidade
        $stats = $notificacaoModel->getEstatisticas();
        
        CLI::write("üî¥ Cr√≠ticas:      {$stats['criticas']}", 'red');
        CLI::write("üü† Altas:         {$stats['altas']}", 'yellow');
        CLI::write("üü° M√©dias:        {$stats['medias']}", 'cyan');
        CLI::write("üü¢ Baixas:        {$stats['baixas']}", 'green');
        
        CLI::newLine();
        CLI::write('üìä POR TIPO:', 'yellow');
        CLI::write('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ', 'yellow');
        
        foreach ($stats['por_tipo'] as $tipo => $total) {
            $tipoFormatado = str_replace('_', ' ', ucwords($tipo));
            CLI::write("‚Ä¢ {$tipoFormatado}: {$total}", 'white');
        }
        
        // Notifica√ß√µes cr√≠ticas recentes
        $criticas = $notificacaoModel->getBySeveridade('critica');
        if (!empty($criticas)) {
            CLI::newLine();
            CLI::write('üö® NOTIFICA√á√ïES CR√çTICAS:', 'red');
            CLI::write('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ', 'red');
            
            foreach (array_slice($criticas, 0, 3) as $critica) {
                CLI::write("‚Ä¢ {$critica['titulo']}", 'red');
            }
            
            if (count($criticas) > 3) {
                CLI::write("... e mais " . (count($criticas) - 3) . " notifica√ß√µes cr√≠ticas", 'red');
            }
        }
    }

    /**
     * Registra resultado da an√°lise para auditoria
     */
    protected function registrarResultadoAnalise(bool $sucesso, int $notificacoesCriadas, string $erro = null): void
    {
        $auditoriaModel = new \App\Models\AuditoriaModel();
        
        $detalhes = $sucesso 
            ? "An√°lise BI executada com sucesso. {$notificacoesCriadas} notifica√ß√µes criadas."
            : "Erro na an√°lise BI: {$erro}";
        
        $auditoriaModel->registrarAcao(
            'An√°lise BI Executada',
            'Notifica√ß√µes',
            $detalhes,
            null, // user_id ser√° null para comandos CLI
            'Sistema CLI',
            null,
            [
                'sucesso' => $sucesso,
                'notificacoes_criadas' => $notificacoesCriadas,
                'erro' => $erro,
                'executado_via' => 'CLI'
            ]
        );
    }

    /**
     * Exibe ajuda personalizada
     */
    public function showHelp(): void
    {
        CLI::write('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'cyan');
        CLI::write('                    AN√ÅLISE BI - AJUDA                     ', 'cyan');
        CLI::write('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'cyan');
        CLI::newLine();
        
        CLI::write('DESCRI√á√ÉO:', 'yellow');
        CLI::write('  Executa an√°lise de Business Intelligence no sistema de');
        CLI::write('  pronto atendimento para gerar notifica√ß√µes inteligentes.');
        CLI::newLine();
        
        CLI::write('USO:', 'yellow');
        CLI::write('  php spark notificacoes:analisar [op√ß√µes]');
        CLI::newLine();
        
        CLI::write('OP√á√ïES:', 'yellow');
        CLI::write('  --force    For√ßa execu√ß√£o mesmo com an√°lise recente');
        CLI::write('  --tipo     Executa tipo espec√≠fico de an√°lise');
        CLI::write('  --quiet    Executa em modo silencioso');
        CLI::newLine();
        
        CLI::write('EXEMPLOS:', 'yellow');
        CLI::write('  php spark notificacoes:analisar');
        CLI::write('  php spark notificacoes:analisar --force');
        CLI::write('  php spark notificacoes:analisar --quiet');
        CLI::newLine();
        
        CLI::write('TIPOS DE AN√ÅLISE:', 'yellow');
        CLI::write('  ‚Ä¢ Pacientes recorrentes (> 3 atendimentos/m√™s)');
        CLI::write('  ‚Ä¢ Surtos de sintomas por regi√£o');
        CLI::write('  ‚Ä¢ Per√≠odos de alta demanda');
        CLI::write('  ‚Ä¢ Anomalias estat√≠sticas');
        CLI::write('  ‚Ä¢ Padr√µes de classifica√ß√£o de risco');
        CLI::newLine();
        
        CLI::write('NOTAS:', 'yellow');
        CLI::write('  - An√°lise autom√°tica executa a cada 2 horas');
        CLI::write('  - Use --force para executar manualmente');
        CLI::write('  - Resultados s√£o salvos no log de auditoria');
        CLI::write('  - Notifica√ß√µes cr√≠ticas requerem a√ß√£o imediata');
        CLI::newLine();
    }
}
